You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.
You may assume the two numbers do not contain any leading zero, except the number 0 itself.
Example
Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
Explanation: 342 + 465 = 807.





-----------------------
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
struct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2) {
    struct ListNode * node1 = l1;
    struct ListNode * node2 = l2;
    struct ListNode * head =(struct ListNode*)malloc(sizeof(struct ListNode));
    head->next=NULL;
    head->val=0; 
    struct ListNode *index = head;
    
    int op=0;
    
    while( node1!=NULL || node2!= NULL)
    {
       

        
        int val=0,val1=0,val2=0;
         if(node1==NULL){
            val1=0;
         }
        else{
            val1= node1->val;
            node1= node1->next;
            
        }
        
        if(node2==NULL){
             val2=0;
         }
        else{
            val2= node2->val;
            node2= node2->next; 
        }
        
        val = ( val2+val1+op);
        op = val/10;
        index->val = val%10;
        
        if(node1!=NULL || node2!=NULL||op!=0){
            index->next= (struct ListNode*)malloc(sizeof(struct ListNode));
            index = index->next;
            index->next=NULL;
            index->val=op; 
        }


    }


    return head;
}
