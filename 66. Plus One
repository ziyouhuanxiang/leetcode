
Given a non-negative integer represented as a non-empty array of digits, plus one to the integer.

You may assume the integer do not contain any leading zero, except the number 0 itself.

The digits are stored such that the most significant digit is at the head of the list.

/**
 * Return an array of size *returnSize.
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* plusOne(int* digits, int digitsSize, int* returnSize) {
    int op = (digits[digitsSize-1] +1)/10;
    int *newdigits = NULL;
    digits[digitsSize-1] =  (digits[digitsSize-1]+1)%10;
    
    for(int i=digitsSize-2 ; i>=0; i-- ){
         if(op == 1 ){
             op = (digits[i]+1)/10;
             digits[i]  =(digits[i]+1)%10;
         }else
         {
             op = 0;
             break;
         }
    }
    if(op==1){
        newdigits = (int*)malloc(sizeof(int)*(digitsSize+1));
        *returnSize = digitsSize+1;
        newdigits[0]=1;
        for(int i=1; i< digitsSize+1; i++){
            newdigits[i]=0;
        }
        return newdigits;
    }
    else{
        *returnSize = digitsSize;
        return digits;
    }
   
}
