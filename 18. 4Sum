Given an array S of n integers, are there elements a, b, c, and d in S such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.

Note: The solution set must not contain duplicate quadruplets.

For example, given array S = [1, 0, -1, 0, -2, 2], and target = 0.

A solution set is:
[
  [-1,  0, 0, 1],
  [-2, -1, 1, 2],
  [-2,  0, 0, 2]
]


class Solution:
    
    def threeSum(self, nums, sum):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        #nums.sort()
        list=[]
        for i in range(len(nums)):
            if i != 0 and nums[i] == nums[i - 1]:
                continue
            target = sum-nums[i] 
            left, right = i+1,len(nums)-1
            while left < right:
                if nums[left]+ nums[right] == target:
                    list.append([nums[i], nums[left], nums[right]])
                    left += 1
                    right -= 1
                    while left < right and nums[left] == nums[left -1]:
                        left += 1
                    while left < right and nums[right] == nums[right +1]:
                        right -= 1
                elif nums[left] + nums[right] > target:
                    right -= 1
                else :
                    left +=1
        return list
    def fourSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[List[int]]
        """
        ret = []
        nums.sort()
        for i in range(len(nums)):
            if i!= 0 and nums[i] == nums[i-1]:
                continue
            a = self.threeSum(nums[i+1:], target - nums[i])
            for x in a :
                ret.append(  [nums[i]] +x)
        return ret
